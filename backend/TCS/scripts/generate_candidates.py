import os
import sys
import django
import random
import shutil
from datetime import datetime, timedelta
from django.utils import timezone
from django.core.files import File
from django.core.files.uploadedfile import SimpleUploadedFile

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'TCS.settings')
django.setup()

from django.contrib.auth import get_user_model
from candidates.models import Candidate, Experience, Education, Skill, Language, CandidateLanguage
from forums.models import Forum, ForumRegistration, CandidateSearch
from users.models import User

User = get_user_model()

# Donn√©es r√©alistes pour diff√©rents domaines
REAL_COMPANIES = {
    'informatique': [
        'Google', 'Microsoft', 'Apple', 'Amazon', 'Meta', 'Netflix', 'Uber', 'Airbnb', 'Spotify', 'Slack',
        'Salesforce', 'Adobe', 'Oracle', 'IBM', 'Intel', 'Cisco', 'VMware', 'SAP', 'Dell', 'HP',
        'Atos', 'Capgemini', 'Sopra Steria', 'Orange', 'Bouygues', 'Thales', 'Dassault Syst√®mes'
    ],
    'finance': [
        'BNP Paribas', 'Cr√©dit Agricole', 'Soci√©t√© G√©n√©rale', 'LCL', 'Caisse d\'√âpargne', 'Banque Populaire',
        'Cr√©dit Mutuel', 'AXA', 'Allianz', 'Generali', 'CNP Assurances', 'Maif', 'Macif',
        'Goldman Sachs', 'Morgan Stanley', 'JP Morgan', 'Deutsche Bank', 'UBS', 'Credit Suisse'
    ],
    'consulting': [
        'McKinsey & Company', 'Bain & Company', 'Boston Consulting Group', 'Deloitte', 'PwC', 'EY', 'KPMG',
        'Accenture', 'Capgemini Consulting', 'Roland Berger', 'Oliver Wyman', 'Strategy&'
    ],
    'industrie': [
        'Total', 'EDF', 'Engie', 'Veolia', 'Saint-Gobain', 'Schneider Electric', 'Legrand', 'Valeo',
        'Faurecia', 'Michelin', 'Renault', 'PSA', 'Airbus', 'Safran', 'Thales', 'Alstom'
    ],
    'sante': [
        'Sanofi', 'Novartis', 'Roche', 'Pfizer', 'AstraZeneca', 'GSK', 'Merck', 'Bayer',
        'AP-HP', 'CHU', 'Fondation Rothschild', 'Institut Curie', 'Institut Pasteur'
    ],
    'marketing': [
        'Publicis', 'Havas', 'WPP', 'Omnicom', 'Interpublic', 'Dentsu', 'TBWA', 'Ogilvy',
        'McCann', 'Leo Burnett', 'Saatchi & Saatchi', 'BBDO', 'DDB'
    ],
    'luxe': [
        'LVMH', 'Kering', 'Richemont', 'Herm√®s', 'Chanel', 'Dior', 'Cartier', 'Rolex',
        'Patek Philippe', 'Audemars Piguet', 'Breguet', 'Boucheron'
    ]
}

REAL_JOBS = {
    'informatique': [
        'D√©veloppeur Full Stack', 'Ing√©nieur DevOps', 'Data Scientist', 'Product Manager', 'Scrum Master',
        'Architecte Logiciel', 'D√©veloppeur Frontend', 'D√©veloppeur Backend', 'Ing√©nieur Cloud',
        'DevOps Engineer', 'Software Engineer', 'Tech Lead', 'CTO', 'Chef de Projet IT'
    ],
    'finance': [
        'Analyste Financier', 'Gestionnaire de Portefeuille', 'Trader', 'Risk Manager', 'Comptable',
        'Auditeur', 'Contr√¥leur de Gestion', 'Directeur Financier', 'Analyste Cr√©dit',
        'Gestionnaire de Patrimoine', 'Conseiller en Investissement'
    ],
    'consulting': [
        'Consultant Senior', 'Manager', 'Directeur', 'Associ√©', 'Analyste Consultant',
        'Chef de Projet', 'Expert Sectoriel', 'Strat√®ge', 'Transformation Manager'
    ],
    'industrie': [
        'Ing√©nieur Production', 'Chef de Projet Industriel', 'Responsable Qualit√©', 'Ing√©nieur R&D',
        'Directeur Technique', 'Ing√©nieur Maintenance', 'Responsable Supply Chain', 'Ing√©nieur Process'
    ],
    'sante': [
        'M√©decin', 'Pharmacien', 'Chercheur', 'Ing√©nieur Biom√©dical', 'Responsable R&D',
        'Chef de Projet M√©dical', 'Data Scientist Sant√©', 'Biostatisticien'
    ],
    'marketing': [
        'Chef de Produit Marketing', 'Digital Marketing Manager', 'Brand Manager', 'Marketing Manager',
        'Growth Hacker', 'Content Manager', 'SEO Specialist', 'Social Media Manager'
    ],
    'luxe': [
        'Brand Manager', 'Product Manager', 'Retail Manager', 'Merchandising Manager',
        'Digital Marketing Manager', 'CRM Manager', 'Store Manager', 'Visual Merchandiser'
    ]
}

REAL_EDUCATION = {
    'informatique': [
        ('Master en Informatique', '√âcole Centrale Paris'),
        ('Master en Data Science', 'ENSAE Paris'),
        ('Master en Intelligence Artificielle', 'Sorbonne Universit√©'),
        ('Master en Syst√®mes d\'Information', 'HEC Paris'),
        ('Master en G√©nie Logiciel', 'T√©l√©com Paris'),
        ('Master en Cybers√©curit√©', 'ESIEE Paris'),
        ('Master en Cloud Computing', 'EPITA'),
        ('Master en DevOps', 'Epitech')
    ],
    'finance': [
        ('Master en Finance', 'HEC Paris'),
        ('Master en √âconomie', 'Sciences Po Paris'),
        ('Master en Gestion', 'ESSEC'),
        ('Master en Finance Quantitative', 'ENSAE Paris'),
        ('Master en Audit', 'ESCP Europe'),
        ('Master en Risk Management', 'EDHEC')
    ],
    'consulting': [
        ('Master en Management', 'HEC Paris'),
        ('Master en Strat√©gie', 'Sciences Po Paris'),
        ('Master en Consulting', 'ESSEC'),
        ('Master en Business Administration', 'INSEAD'),
        ('Master en √âconomie', 'Sorbonne Universit√©')
    ],
    'industrie': [
        ('Master en G√©nie Industriel', '√âcole Centrale Paris'),
        ('Master en G√©nie M√©canique', 'Arts et M√©tiers'),
        ('Master en G√©nie √âlectrique', 'Sup√©lec'),
        ('Master en Automatique', 'T√©l√©com Paris'),
        ('Master en G√©nie Chimique', 'ENSCP')
    ],
    'sante': [
        ('Doctorat en M√©decine', 'Universit√© Paris Descartes'),
        ('Master en Pharmacie', 'Universit√© Paris-Saclay'),
        ('Master en Biologie', 'Sorbonne Universit√©'),
        ('Master en Biostatistiques', 'ENSAE Paris'),
        ('Master en √âpid√©miologie', 'Institut Pasteur')
    ],
    'marketing': [
        ('Master en Marketing', 'HEC Paris'),
        ('Master en Communication', 'Sciences Po Paris'),
        ('Master en Digital Marketing', 'ESCP Europe'),
        ('Master en Brand Management', 'ESSEC'),
        ('Master en Publicit√©', 'Celsa')
    ],
    'luxe': [
        ('Master en Management du Luxe', 'ESSEC'),
        ('Master en Marketing du Luxe', 'ESCP Europe'),
        ('Master en Mode et Luxe', 'IFM'),
        ('Master en Brand Management', 'HEC Paris'),
        ('Master en Retail Management', 'ESCP Europe')
    ]
}

REAL_SKILLS = {
    'informatique': [
        'Python', 'JavaScript', 'Java', 'React', 'Node.js', 'Docker', 'Kubernetes', 'AWS', 'Azure',
        'Git', 'SQL', 'MongoDB', 'Redis', 'Elasticsearch', 'Kafka', 'Microservices', 'REST API',
        'GraphQL', 'TypeScript', 'Vue.js', 'Angular', 'Spring Boot', 'Django', 'Flask'
    ],
    'finance': [
        'Excel', 'VBA', 'Python', 'R', 'SAS', 'Bloomberg', 'Reuters', 'RiskMetrics', 'VaR',
        'Monte Carlo', 'Black-Scholes', 'Financial Modeling', 'Accounting', 'Audit', 'Compliance'
    ],
    'consulting': [
        'PowerPoint', 'Excel', 'Strategy', 'Business Development', 'Change Management',
        'Process Optimization', 'Market Analysis', 'Competitive Intelligence', 'Project Management'
    ],
    'industrie': [
        'AutoCAD', 'SolidWorks', 'CATIA', 'SAP', 'Six Sigma', 'Lean Manufacturing', 'Quality Management',
        'Supply Chain Management', 'Maintenance Planning', 'Process Optimization'
    ],
    'sante': [
        'R', 'Python', 'SAS', 'SPSS', 'Clinical Trials', 'Biostatistics', 'Epidemiology',
        'Medical Research', 'Data Analysis', 'Statistical Modeling'
    ],
    'marketing': [
        'Google Analytics', 'Facebook Ads', 'Google Ads', 'SEO', 'SEM', 'Content Marketing',
        'Social Media Marketing', 'Email Marketing', 'CRM', 'Marketing Automation'
    ],
    'luxe': [
        'Brand Management', 'Retail Management', 'CRM', 'Visual Merchandising', 'Customer Experience',
        'Luxury Marketing', 'Digital Marketing', 'Social Media', 'E-commerce'
    ]
}

# Pr√©noms et noms fran√ßais r√©alistes
FIRST_NAMES = [
    'Thomas', 'Lucas', 'Hugo', 'Jules', 'L√©o', 'Gabriel', 'Rapha√´l', 'Arthur', 'Louis', 'Adam',
    'Emma', 'L√©a', 'Chlo√©', 'Jade', 'Alice', 'Lola', 'In√®s', 'Camille', 'Sarah', 'Zo√©',
    'Antoine', 'Nicolas', 'Pierre', 'Alexandre', 'Baptiste', 'Maxime', 'Th√©o', 'Paul', 'Victor', 'Romain',
    'Marie', 'Sophie', 'Julie', 'Clara', 'Manon', 'Eva', 'Louise', 'Mia', 'Nina', 'L√©na'
]

LAST_NAMES = [
    'Martin', 'Bernard', 'Dubois', 'Thomas', 'Robert', 'Richard', 'Petit', 'Durand', 'Leroy', 'Moreau',
    'Simon', 'Laurent', 'Lefebvre', 'Michel', 'Garcia', 'David', 'Bertrand', 'Roux', 'Vincent', 'Fournier',
    'Morel', 'Girard', 'Andre', 'Lefevre', 'Mercier', 'Dupont', 'Lambert', 'Bonnet', 'Francois', 'Martinez'
]

def clean_existing_candidates():
    """Supprime tous les candidats existants et leurs utilisateurs associ√©s"""
    print("üßπ Nettoyage des candidats existants...")
    
    # Supprimer tous les utilisateurs avec le r√¥le 'candidate'
    candidate_users = User.objects.filter(role='candidate')
    users_deleted = candidate_users.count()
    candidate_users.delete()
    
    # Supprimer tous les candidats (au cas o√π il en resterait)
    candidates = Candidate.objects.all()
    candidates_deleted = candidates.count()
    candidates.delete()
    
    print(f"‚úÖ {candidates_deleted} candidats et {users_deleted} utilisateurs supprim√©s")
    print("üßπ Nettoyage termin√© !")

def generate_realistic_candidates(num_candidates=50, clean_existing=True):
    """G√©n√®re des candidats r√©alistes avec de vraies entreprises et exp√©riences"""
    
    # Nettoyer d'abord les candidats existants si demand√©
    if clean_existing:
        clean_existing_candidates()
    
    print(f"G√©n√©ration de {num_candidates} candidats r√©alistes...")
    
    # R√©cup√©rer tous les forums disponibles
    forums = Forum.objects.all()
    if not forums.exists():
        print("‚ùå Aucun forum trouv√©. Veuillez cr√©er des forums avant de g√©n√©rer des candidats.")
        return
    
    print(f"üìã {forums.count()} forums trouv√©s pour l'inscription des candidats")
    
    # R√©cup√©rer les photos disponibles depuis scripts/candidate_pictures
    pictures_dir = os.path.join(os.path.dirname(__file__), 'candidate_pictures')
    available_pictures = []
    if os.path.exists(pictures_dir):
        for file in os.listdir(pictures_dir):
            if file.lower().endswith(('.png', '.jpg', '.jpeg', '.gif')):
                available_pictures.append(os.path.join(pictures_dir, file))
    
    print(f"üì∏ {len(available_pictures)} photos trouv√©es pour les candidats")
    
    # Donn√©es r√©alistes pour les filtres
    REGIONS = ['Occitanie', '√éle-de-France', 'Auvergne-Rh√¥ne-Alpes', 'Provence-Alpes-C√¥te d\'Azur', 'Nouvelle-Aquitaine', 'Hauts-de-France', 'Grand Est', 'Centre-Val de Loire', 'Bourgogne-Franche-Comt√©', 'Normandie']
    CONTRACT_TYPES = ['CDI', 'CDD', 'Alternance', 'Freelance', 'Stage']
    EXPERIENCE_LEVELS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20]
    
    for i in range(num_candidates):
        # Choisir un domaine al√©atoire
        domain = random.choice(list(REAL_COMPANIES.keys()))
        
        # G√©n√©rer des donn√©es personnelles
        first_name = random.choice(FIRST_NAMES)
        last_name = random.choice(LAST_NAMES)
        title = random.choice(['Monsieur', 'Madame'])
        
        # Email s√©quentiel
        email = f"candidat{i+1}@gmail.com"
        
        # T√©l√©phone ironis√©
        phone = f"0{random.randint(6, 7)}{random.randint(10000000, 99999999)}"
        
        # Donn√©es r√©alistes pour les filtres
        region = random.choice(REGIONS)
        contract_type = random.choice(CONTRACT_TYPES)
        experience_years = random.choice(EXPERIENCE_LEVELS)
        rqth = random.choice([True, False, False, False, False])  # 20% de chance d'√™tre RQTH
        
        # V√©rifier si l'email existe d√©j√†
        if User.objects.filter(email=email).exists():
            print(f"‚ö†Ô∏è L'email {email} existe d√©j√†, passage au suivant...")
            continue
            
        # Cr√©er l'utilisateur
        try:
            user = User.objects.create_user(
                email=email,
                password='password123',
                role='candidate',
                is_active=True
            )
            
            # Cr√©er le profil candidat
            candidate_data = {
                'user': user,
                'first_name': first_name,
                'last_name': last_name,
                'title': title,
                'phone': phone,
                'education_level': random.choice(['Bac+3', 'Bac+4', 'Bac+5', 'Bac+8']),
                'preferred_contract_type': contract_type
            }
            
            # Ajouter une photo de profil si disponible
            if available_pictures:
                picture_path = random.choice(available_pictures)
                # Lire le contenu du fichier et cr√©er un SimpleUploadedFile
                with open(picture_path, 'rb') as f:
                    file_content = f.read()
                file_name = os.path.basename(picture_path)
                candidate_data['profile_picture'] = SimpleUploadedFile(file_name, file_content, content_type='image/jpeg')
            
            candidate = Candidate.objects.create(**candidate_data)
            
            # Ajouter 1-3 exp√©riences
            num_experiences = random.randint(1, 3)
            for exp_idx in range(num_experiences):
                company = random.choice(REAL_COMPANIES[domain])
                job_title = random.choice(REAL_JOBS[domain])
                
                # Dates r√©alistes
                start_date = datetime.now() - timedelta(days=random.randint(365, 1825))  # 1-5 ans
                end_date = start_date + timedelta(days=random.randint(180, 1095))  # 6 mois - 3 ans
                
                Experience.objects.create(
                    candidate=candidate,
                    job_title=job_title,
                    company=company,
                    description=f"Responsable de {job_title.lower()} chez {company}. Missions principales : d√©veloppement de projets, gestion d'√©quipe, optimisation des processus.",
                    start_date=start_date.date(),
                    end_date=end_date.date()
                )
            
            # Ajouter 1-2 formations
            num_educations = random.randint(1, 2)
            for edu_idx in range(num_educations):
                degree, institution = random.choice(REAL_EDUCATION[domain])
                
                # Dates de formation
                start_date = datetime.now() - timedelta(days=random.randint(1095, 2555))  # 3-7 ans
                end_date = start_date + timedelta(days=random.randint(730, 1095))  # 2-3 ans
                
                Education.objects.create(
                    candidate=candidate,
                    degree=degree,
                    institution=institution,
                    start_date=start_date.date(),
                    end_date=end_date.date()
                )
            
            # Ajouter 5-10 comp√©tences
            skills = random.sample(REAL_SKILLS[domain], random.randint(5, min(10, len(REAL_SKILLS[domain]))))
            for skill_name in skills:
                Skill.objects.create(
                    candidate=candidate,
                    name=skill_name
                )
            
            # Ajouter 2-3 langues
            languages = ['Fran√ßais', 'Anglais', 'Espagnol', 'Allemand', 'Italien', 'Chinois']
            candidate_languages = random.sample(languages, random.randint(2, 3))
            
            for lang_name in candidate_languages:
                language, created = Language.objects.get_or_create(name=lang_name)
                level = random.choice(['D√©butant', 'Interm√©diaire', 'Avanc√©', 'Courant'])
                CandidateLanguage.objects.create(
                    candidate=candidate,
                    language=language,
                    level=level
                )
            
            # Inscrire le candidat √† 1-3 forums al√©atoires
            num_forums = random.randint(1, min(3, forums.count()))
            selected_forums = random.sample(list(forums), num_forums)
            
            for forum in selected_forums:
                try:
                    # Cr√©er l'inscription au forum
                    registration = ForumRegistration.objects.create(
                        forum=forum,
                        candidate=candidate
                    )
                    
                    # Cr√©er le profil de recherche pour ce forum avec des donn√©es coh√©rentes
                    search_data = {
                        'contract_type': [contract_type],
                        'sector': [domain],  # Utiliser le domaine du candidat
                        'experience': experience_years,
                        'region': region,
                        'rqth': rqth
                    }
                    
                    search = CandidateSearch.objects.create(**search_data)
                    
                    # Lier la recherche √† l'inscription
                    registration.search = search
                    registration.save()
                    
                    print(f"  üìã Inscrit au forum : {forum.name}")
                    
                except Exception as e:
                    print(f"  ‚ö†Ô∏è Erreur lors de l'inscription au forum {forum.name}: {e}")
                    continue
            
            print(f"‚úÖ Candidat {i+1}/{num_candidates} cr√©√© : {first_name} {last_name} ({domain}) - {contract_type} - {experience_years} ans - {region}")
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la cr√©ation du candidat {i+1}: {e}")
            continue
    
    print(f"\nüéâ G√©n√©ration termin√©e ! {num_candidates} candidats cr√©√©s avec succ√®s.")
    print("üìß Emails s√©quentiels : candidat1@gmail.com √† candidat50@gmail.com")
    print("üîë Mot de passe : password123 (hash√© automatiquement)")
    print("‚úÖ Tous les comptes sont activ√©s")
    print("üè¢ Entreprises, exp√©riences et formations sont bas√©es sur des donn√©es r√©elles.")
    print("üì∏ Photos de profil : Assign√©es al√©atoirement depuis le dossier scripts/candidate_pictures")
    print("üìã Inscriptions aux forums : Chaque candidat est inscrit √† 1-3 forums")
    print("üîç Profils de recherche : Cr√©√©s avec des donn√©es coh√©rentes pour tester les filtres")
    print("üéØ Donn√©es de test : R√©gions, contrats, exp√©rience, RQTH vari√©s pour les filtres")

def run():
    """Fonction requise pour django-extensions"""
    generate_realistic_candidates(50) 